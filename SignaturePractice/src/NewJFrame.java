/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.*;
import java.security.spec.EncodedKeySpec;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Jay
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public PublicKey m_PublicKey;
    public PrivateKey m_PrivateKey;
    public Path m_Path;

    public NewJFrame() {
        initComponents();
        this.m_Path = Paths.get("").toAbsolutePath();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("GenKeys");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setLabel("LoadPrivateKey");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("LoadPublicKey");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton4.setText("Verify");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Sign");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(32, 32, 32))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addGap(0, 139, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try {
            KeyPairGenerator _KeyGen = KeyPairGenerator.getInstance("RSA");
            SecureRandom random = SecureRandom.getInstance("SHA1PRNG", "SUN");
            _KeyGen.initialize(1024, random);
            KeyPair _Pair = _KeyGen.generateKeyPair();
            PrivateKey _PrivateKey = _Pair.getPrivate();
            byte[] _EncodedPrivateKey = _PrivateKey.getEncoded();
            FileOutputStream _PrivateKeyFOS = new FileOutputStream(this.m_Path.toAbsolutePath().getParent().toString() + "/privateKey");
            _PrivateKeyFOS.write(_EncodedPrivateKey);
            _PrivateKeyFOS.close();
            PublicKey _PublicKey = _Pair.getPublic();
            byte[] _EncodedPublicKey = _PublicKey.getEncoded();
            FileOutputStream _PublicKeyFOS = new FileOutputStream(this.m_Path.toAbsolutePath().getParent().toString() + "/publicKey");
            _PublicKeyFOS.write(_EncodedPublicKey);
            _PublicKeyFOS.close();
            jTextArea1.setText(jTextArea1.getText() + "\nKeys have been generated.");
        } catch (IOException | NoSuchAlgorithmException | NoSuchProviderException exp) {
            String _ErrorInfo = exp.getMessage();
            System.out.println(_ErrorInfo);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try {
            KeyFactory _KF = KeyFactory.getInstance("RSA");
            byte[] _PrivateKeyBytes = Files.readAllBytes(Paths.get(this.m_Path.toAbsolutePath().getParent().toString() + "/privateKey"));
            EncodedKeySpec _PrivateKeySpec = new PKCS8EncodedKeySpec(_PrivateKeyBytes);
            this.m_PrivateKey = _KF.generatePrivate(_PrivateKeySpec);
            jTextArea1.setText(jTextArea1.getText() + "\nPrivateKey Loaded");
        } catch (Exception exp) {
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        try {
            KeyFactory _KF = KeyFactory.getInstance("RSA");
            byte[] _PublicKeyBytes = Files.readAllBytes(Paths.get(this.m_Path.toAbsolutePath().getParent().toString() + "/publicKey"));
            EncodedKeySpec _PublicKeySpec = new X509EncodedKeySpec(_PublicKeyBytes);
            this.m_PublicKey = _KF.generatePublic(_PublicKeySpec);
            jTextArea1.setText(jTextArea1.getText() + "\nPublicKey Loaded");
        } catch (Exception exp) {
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            // TODO add your handling code here:
            int len;
            byte[] buffer = new byte[1024];
            byte[] _Data = Files.readAllBytes(Paths.get(this.m_Path.toAbsolutePath().getParent().toString() + "/MySignedFile.txt"));
            Signature _Sig = Signature.getInstance("SHA256withRSA");
            _Sig.initVerify(this.m_PublicKey);
            FileInputStream _FIS = new FileInputStream(this.m_Path.toAbsolutePath().getParent().toString() + "/MyFile.txt");
            while ((len = _FIS.read(buffer)) > 0) {
                _Sig.update(buffer, 0, len);
            }
            boolean _Verified = _Sig.verify(_Data);
            jTextArea1.setText(jTextArea1.getText() + "\nVerification Result: " + _Verified);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeyException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SignatureException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        try {
            Signature _Sig = Signature.getInstance("SHA256withRSA");
            _Sig.initSign(this.m_PrivateKey);
            try (FileInputStream _FS = new FileInputStream(this.m_Path.toAbsolutePath().getParent().toString() + "/MyFile.txt"); BufferedInputStream _BIS = new BufferedInputStream(_FS)) {
                byte[] buffer = new byte[1024];
                int len;
                while ((len = _BIS.read(buffer)) > 0) {
                    _Sig.update(buffer, 0, len);
                }
            }

            byte[] _SignValue = _Sig.sign();
            if (Files.exists(Paths.get(this.m_Path.toAbsolutePath().getParent().toString() + "/MySignedFile.txt"))) {
                Files.delete(Paths.get(this.m_Path.toAbsolutePath().getParent().toString() + "/MySignedFile.txt"));
            }

            try (FileOutputStream _FOS = new FileOutputStream(this.m_Path.toAbsolutePath().getParent().toString() + "/MySignedFile.txt")) {
                _FOS.write(_SignValue);
            }
            jTextArea1.setText(jTextArea1.getText() + "\nFile has been signed");
        } catch (IOException | NoSuchAlgorithmException | SignatureException exp) {
        } catch (InvalidKeyException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
